To set up a `tsconfig.json` for a minimal Vite + TypeScript project based on your project's requirements, you can use the following configuration. This configuration is tailored for modern web development, supporting ESModules, and includes options for source mapping and strict type checking, which are essential for a quality TypeScript project.

```json
{
  "compilerOptions": {
    "target": "ESNext",                        // Target modern JavaScript features
    "useDefineForClassFields": true,            // Use define for class fields
    "module": "ESNext",                         // Use ES Modules
    "moduleResolution": "node",                 // Resolve modules using Node.js style
    "jsx": "preserve",                          // Preserve JSX syntax for frameworks like React or Vue
    "sourceMap": true,                          // Generate source maps for debugging
    "strict": true,                             // Enable strict type checking
    "esModuleInterop": true,                    // Enables emit interoperability for commonjs and es modules
    "skipLibCheck": true,                       // Skip type checking of declaration files
    "forceConsistentCasingInFileNames": true    // Enforce consistent casing for imports
  },
  "include": ["src"],                           // Include source files in the `src` directory
  "exclude": ["node_modules", "dist"]           // Exclude these directories
}
```

### Explanation:

- **`target`**: Set to `ESNext` to enable modern JavaScript features.
- **`useDefineForClassFields`**: This setting is often used in conjunction with ESNext target to optimize how class fields are initialized.
- **`module`**: Also set to `ESNext` to use native ESModules.
- **`moduleResolution`**: Specifies the module resolution strategy. The `node` option is typically used for projects that use Node.js tools and libraries.
- **`jsx`**: Set to `preserve` to keep JSX syntax intact, useful for projects using React or Vue.
- **`sourceMap`**: This creates source maps, which are useful for debugging TypeScript code in browsers.
- **`strict`**: Enables all strict type-checking options.
- **`esModuleInterop`**: This option adds emit interoperability between CommonJS and ES Modules.
- **`skipLibCheck`**: Avoids type checking of declaration files (`.d.ts`) to improve build times.
- **`forceConsistentCasingInFileNames`**: Enforces consistent file name casing.

This configuration will fit well within a Vite setup, which is typically based on ESNext and modern build strategies, making it suitable for a streamlined development experience. You would implement this alongside Vite's configuration files (such as `vite.config.js` or `vite.config.ts`) to fully integrate TypeScript into your build process.